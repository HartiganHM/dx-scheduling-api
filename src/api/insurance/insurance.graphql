type Insurance {
  id: ID!
  idNumber: String!
  groupNumber: String!
  provider: String!
  insured: Parent!
}

input InsuranceInput {
  id: ID!
}

input InsuranceCreateInput {
  idNumber: String!
  groupNumber: String!
  provider: String!
  insured: Parent!
}

input InsuranceCreateManyInput {
  create: [InsuranceCreateInput!]
}

input InsuranceUpdateInput {
  idNumber: String
  groupNumber: String
  provider: String
  insured: Parent
}

input InsuranceUpdateDataInput {
  idNumber: String!
  groupNumber: String!
  provider: String!
  insured: Parent!
}

input InsuranceUpdateWithWhereUniqueNestedInput {
  where: InsuranceWhereUniqueInput!
  data: InsuranceUpdateDataInput!
}

input InsuranceUpdateManyInput {
  update: [InsuranceUpdateWithWhereUniqueNestedInput!]
}

input InsuranceWhereUniqueInput {
  id: ID!
}

extend type Query {
  insurance(input: InsuranceInput!): Insurance!
  insurances: [Insurance]!
}

extend type Mutation {
  createInsurance(input: InsuranceCreateInput!): Insurance!
  deleteInsurance(where: InsuranceWhereUniqueInput!): Insurance!
  updateInsurance(
    input: InsuranceUpdateInput!
    where: InsuranceWhereUniqueInput!
  ): Insurance!
}
