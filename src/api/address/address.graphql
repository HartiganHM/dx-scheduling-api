type Address {
  id: ID!
  street: String!
  city: String!
  state: String!
  zip: String!
}

input AddressInput {
  id: ID!
}

input AddressCreateInput {
  street: String!
  city: String!
  state: String!
  zip: String!
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input AddressUpdateInput {
  street: String
  city: String
  state: String
  zip: String
}

input AddressUpdateDataInput {
  street: String
  city: String
  state: String
  zip: String
}

input AddressUpdateOneRequiredInput {
  update: AddressUpdateDataInput
}

input AddressWhereUniqueInput {
  id: ID!
}

type Query {
  address(where: AddressInput): Address
  addresses: [Address]!
}

type Mutation {
  createAddress(input: AddressCreateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address!
  updateAddress(
    input: AddressUpdateInput!
    where: AddressWhereUniqueInput!
  ): Address
}
