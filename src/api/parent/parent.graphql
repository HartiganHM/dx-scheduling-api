type Parent {
  id: ID!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  email: String!
  address: Address!
  isInSameHousehold: Boolean!
  dob: String
}

input ParentInput {
  id: ID!
}

input ParentCreateInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  email: String!
  isInSameHousehold: Boolean!
  dob: String
  address: AddressCreateOneInput!
}

input ParentCreateManyInput {
  create: [ParentCreateInput!]
}

input ParentUpdateInput {
  firstName: String
  lastName: String
  phoneNumber: String
  email: String
  address: AddressUpdateOneRequiredInput
  isInSameHousehold: Boolean
  dob: String
}

input ParentUpdateDataInput {
  firstName: String
  lastName: String
  phoneNumber: String
  email: String
  isInSameHousehold: Boolean
  dob: String
  address: AddressUpdateOneRequiredInput
}

input ParentUpdateWithWhereUniqueNestedInput {
  where: ParentWhereUniqueInput!
  data: ParentUpdateDataInput!
}

input ParentUpdateManyInput {
  update: [ParentUpdateWithWhereUniqueNestedInput!]
}

input ParentWhereUniqueInput {
  id: ID!
}

extend type Query {
  parent(where: ParentInput!): Parent!
  parents: [Parent]!
}

extend type Mutation {
  createParent(input: ParentCreateInput!): Parent!
  deleteParent(where: ParentWhereUniqueInput!): Parent!
  updateParent(
    input: ParentUpdateInput!
    where: ParentWhereUniqueInput!
  ): Parent!
}
